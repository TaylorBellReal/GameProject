[gd_scene load_steps=5 format=3 uid="uid://bb6j07fe6ic6u"]

[sub_resource type="GDScript" id="GDScript_a0wc1"]
resource_name = "fps_controller"
script/source = "extends CharacterBody3D

const SPEED = 1.25
const JUMP_VELOCITY = 2.25


var _mouse_input : bool = false
var _mouse_rotation : Vector3
var _rotation_input : float
var _tilt_input : float
var _player_rotation : Vector3
var _camera_rotation : Vector3

var hose_onoff:bool = false

var mouse_state = 'normal'

@export var MOUSE_SENSITIVITY : float = .25
@export var TILT_LOWER_LIMIT := deg_to_rad(-90.0)
@export var TILT_UPPER_LIMIT := deg_to_rad(90.0)
@export var CAMERA_CONTROLLER : Camera3D
@export var PET : Node3D
@onready var PEN : Node3D = $\"../PetHouse\".get_child(0)
@onready var BAG : Node3D = $\"../Foodbag/StaticBody3D\"
@onready var FRIS: Node3D = $\"../RigidBody3D\"
@onready var BOWL : Node3D = $\"../Objects/Foodbowl/StaticBody3D\"
@onready var HOSE: Node3D = $\"../Objects/WaterHose/StaticBody3D\"
@onready var PILLS: Node3D = $\"../Objects/Medicine/StaticBody3D\"

@onready var animplay = $\"../AnimationPlayer\"

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _input(event):
	if event.is_action_pressed(\"exit\"):
		if mouse_state == 'normal':
			mouse_state = 'pause'
			$\"../CanvasLayer/HandIdleSprite\".visible = false
			$\"../CanvasLayer/Overlay2\".visible = true
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED
			animplay.play(\"Pause_Screen\")
			await animplay.animation_finished
			$\"../CanvasLayer/Overlay2/Pawsscreen2\".on_off_switch = true
		elif mouse_state == 'pause':
			animplay.play(\"unpause\")
			await animplay.animation_finished
			mouse_state = 'normal'
			$\"../CanvasLayer/HandIdleSprite\".visible = true
			$\"../CanvasLayer/Overlay2\".visible = false
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
			
	###################################################################################3
	##### TESTING
	###################################################################################
	#if event.is_action_pressed(\"extra\"):
#	PET.ICON.visible = false
	###################################################################################3
	##### TESTING
	###################################################################################
	
	if event.is_action_pressed(\"interact\"):
		if mouse_state == 'normal':
			mouse_state = 'interact'
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
		elif mouse_state == 'interact':
			mouse_state = 'normal'
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
		elif mouse_state == 'holding':
			pass

func _ready():
	mouse_state = 'normal'
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	set_collision_mask_value(PET.get_collision_layer(), false)
	play_music()
	
func play_music():
	if $\"../Music\".playing == false:
		$\"../Music\".play()

func _unhandled_input(event):
	_mouse_input = event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED
	if _mouse_input:
		_rotation_input = -event.relative.x * MOUSE_SENSITIVITY
		_tilt_input = -event.relative.y * MOUSE_SENSITIVITY
		
func _update_camera(delta):
		#rotate camera using euler rotation
		_mouse_rotation.x += _tilt_input * delta
		_mouse_rotation.x = clamp(_mouse_rotation.x, TILT_LOWER_LIMIT,TILT_UPPER_LIMIT)
		_mouse_rotation.y += _rotation_input * delta
		
		_player_rotation = Vector3(0, _mouse_rotation.y,0)
		_camera_rotation = Vector3(_mouse_rotation.x,0,0)
		
		CAMERA_CONTROLLER.transform.basis = Basis.from_euler(_camera_rotation)
		CAMERA_CONTROLLER.rotation.z = 0.0
		
		global_transform.basis = Basis.from_euler(_player_rotation)
		
		_rotation_input = 0.0
		_tilt_input = 0.0

func _physics_process(delta):
	play_music()
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta
	
	if mouse_state == 'normal' or mouse_state == 'holding':
		_update_camera(delta)
	
		# Handle Jump.
		if Input.is_action_just_pressed(\"jump\") and is_on_floor():
			velocity.y = JUMP_VELOCITY

		# Get the input direction and handle the movement/deceleration.
		# As good practice, you should replace UI actions with custom gameplay actions.
		var input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_forward\", \"move_backward\")
		var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
		if direction:
			velocity.x = direction.x * SPEED
			velocity.z = direction.z * SPEED
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)
			velocity.z = move_toward(velocity.z, 0, SPEED)
			
		move_and_slide()


func _on_detection_body_entered(body):
	#print(body)
	if body == PET:
		PET.player_in_sight = true
	if body == PEN:
		PEN.player_in_sight = true
	if body == BAG:
		BAG.player_in_sight = true
	if body == FRIS:
		FRIS.player_in_sight = true
	if body == BOWL:
		BOWL.player_in_sight = true
	if body == PILLS:
		PILLS.player_in_sight = true
	if body == HOSE:
		HOSE.player_in_sight = true


func _on_detection_body_exited(body):
	#print(body)
	if body == PET:
		PET.player_in_sight = false
	if body == PEN:
		PEN.player_in_sight = false
	if body == BAG:
		BAG.player_in_sight = false
	if body == FRIS:
		FRIS.player_in_sight = false
	if body == BOWL:
		BOWL.player_in_sight = false
	if body == PILLS:
		PILLS.player_in_sight = false
	if body == HOSE:
		HOSE.player_in_sight = false


func _on_shift_timer_timeout():
	$\"../CanvasLayer/Endscreen\".visible = true
	animplay.play(\"win_screen\")
	await animplay.animation_finished
	get_tree().change_scene_to_file(\"res://Scenes/title.tscn\")
	pass # Replace with function body.


func _on_button_pressed():
	$\"../CanvasLayer/Overlay\".visible = true
	$\"../CanvasLayer/Overlay/Panel\".visible = false
	animplay.play(\"unpause\")
	await animplay.animation_finished
	get_tree().change_scene_to_file(\"res://Scenes/title.tscn\")
	pass # Replace with function body.


func _on_button_2_pressed():
	get_tree().quit()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_7hahq"]
radius = 0.05
height = 1.0

[sub_resource type="CapsuleMesh" id="CapsuleMesh_q7hla"]
radius = 0.25
height = 1.0

[sub_resource type="BoxShape3D" id="BoxShape3D_3xx1n"]

[node name="CharacterBody3D" type="CharacterBody3D" node_paths=PackedStringArray("CAMERA_CONTROLLER")]
script = SubResource("GDScript_a0wc1")
CAMERA_CONTROLLER = NodePath("CameraController/Camera3D")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_7hahq")

[node name="PlaceholderMesh" type="MeshInstance3D" parent="CollisionShape3D"]
mesh = SubResource("CapsuleMesh_q7hla")

[node name="CameraController" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.654585, 0)

[node name="Camera3D" type="Camera3D" parent="CameraController"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.477823, 0)

[node name="ReflectionProbe" type="ReflectionProbe" parent="CameraController/Camera3D"]
update_mode = 1

[node name="Detection?" type="Area3D" parent="."]
transform = Transform3D(3.50454, 0, 3.56626, 0, 5, 0, -3.56626, 0, 3.50454, 0, 0, -3.00411)
collision_mask = 3

[node name="CollisionShape3D" type="CollisionShape3D" parent="Detection?"]
shape = SubResource("BoxShape3D_3xx1n")

[connection signal="body_entered" from="Detection?" to="." method="_on_detection_body_entered"]
[connection signal="body_exited" from="Detection?" to="." method="_on_detection_body_exited"]
